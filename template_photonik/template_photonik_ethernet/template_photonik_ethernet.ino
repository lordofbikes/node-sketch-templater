/*
SenseBox Citizen Sensingplatform
Version: 1.3.1
Date: 2015-02-18
Homepage: http://www.sensebox.de
Author: Jan Wirwahn, Institute for Geoinformatics, University of Muenster
Note: Sketch for SB-Photonik-Ethernet
MAC-address and IP has to be changed according to your setup.
Disable Serial.print functions for better performance on your stand-alone sensor setup. 
*/

#include <Wire.h>
#include <SPI.h>
#include <Ethernet.h>
#include <DHT.h>
#include <Barometer.h>
#include <Digital_Light_TSL2561.h>
#include <avr/wdt.h>

//SenseBox ID

//Sensor IDs

//Sensor pin settings
#define UVPIN A0
#define DHTPIN A1
#define DHTTYPE DHT11

//INDIVIDUAL SETUP
//Change MAC-adress here:
byte mac[] = { 0x90, 0xA2, 0xDA, 0x0D, 0x86, 0x46 }; 

//Specify an IP according to your network settings:
IPAddress ip(192,168,1,111);
//The following IDs were generated by the OSM-server. Change them to your IDs:

char server[] = "opensensemap.org";
EthernetClient client; 

String currentSensorId = TEMPERATURESENSOR_ID;
float temperature, humidity, pressure;
unsigned long  lux;
unsigned int analogUv;

DHT dht(DHTPIN, DHTTYPE);
Barometer barometer;

//Variables for time sync and upload intervall
int postInterval = 100000;
boolean lastConnected = false;
String sensorSample;
int sampleType = 1; //begin with temperature
int phenomCount = 5; //1=temp,2=humi,3=pressure,4=lux,5=UV

//post sample each 10 minutes
//deprecated 
long timeOld = 0;
long timeNew = 0;

void setup()
{
  Wire.begin();
  Serial.begin(9600); 
//Try DHCP first 
  if (Ethernet.begin(mac) == 0) 
  {
    Serial.println("Failed to configure Ethernet using DHCP"); 
    Ethernet.begin(mac, ip); 
  } 
  delay(1000);
  Serial.println("STARTING UP");
  barometer.init();
  dht.begin();
  TSL2561.init();
}

void loop()
{ 

  // if there's no net connection, but there was one last time
  // through the loop, then stop the client:
  if (!client.connected() && lastConnected) {
    Serial.println();
    Serial.println("disconnecting.");
    client.stop();
  }
  
  timeNew = millis(); 
  if (!client.connected() && (timeNew - timeOld > postInterval))
  { 
    Serial.println();
    delay(1000);
    sensorSample = "";
    switch (sampleType)
    {
      case 1:
        //temperature = dht.readTemperature();
        temperature = barometer.bmp085GetTemperature(barometer.bmp085ReadUT());
        sensorSample = floatToString(temperature,0);
        currentSensorId = TEMPERATURESENSOR_ID;
        break;
      case 2:
        humidity = dht.readHumidity();
        sensorSample = floatToString(humidity,0);
        currentSensorId = HUMIDITYSENSOR_ID;//bmp085ReadUT MUST be called first
        break;
      case 3:
        pressure = barometer.bmp085GetTemperature(barometer.bmp085ReadUT());
        pressure = barometer.bmp085GetPressure(barometer.bmp085ReadUP());
        sensorSample = floatToString(pressure,0);
        currentSensorId = PRESSURESENSOR_ID;
        break;
      case 4:
        TSL2561.getLux();
        lux = TSL2561.calculateLux(0,0,1);
        sensorSample = (String)lux;
        currentSensorId = LUXSENSOR_ID;
        break;
      case 5:
        analogUv = analogRead(UVPIN);
        sensorSample = (String)calcUvIndex(analogUv);
        currentSensorId = UVSENSOR_ID;
        break;
    }
    postObservation(sensorSample, currentSensorId, SENSEBOX_ID); 
    timeOld = millis(); 
  }
  lastConnected = client.connected();
}

void postObservation(String measurement, String sensorId, String boxId)
{ 
  //json must look like: {"value":"12.5"} 
  Serial.print("Preparing data: "); 
  String jsonData = "{\"value\":"; 
  jsonData += measurement; 
  jsonData += "}"; 
  Serial.println(jsonData);
  // if you get a connection, report back via serial: 
  boxId += "/"; 
  //post observation to: http://opensensemap.org:8000/boxes/boxId/sensorId
  Serial.print("Connecting to OSM server...");
  if (client.connect(server, 8000)) 
  {
    Serial.println("connected"); 
    // Make a HTTP Post request: 
    client.print("POST /boxes/"); 
    client.print(boxId);
    client.print("/"); 
    client.print(sensorId); 
    client.println(" HTTP/1.1"); 
    // Send the required header parameters 
    client.println("Host:opensensemap.org"); 
    client.println("Content-Type: application/json"); 
    client.println("Connection: close");  
    client.print("Content-Length: "); 
    client.println(jsonData.length()); 
    client.println(); 
    client.print(jsonData); 
    client.println(); 
  } 
  waitForResponse();
  switchSampleType();
}

void switchSampleType(){
if (sampleType == phenomCount) sampleType = 1;
    else sampleType++;
}

void waitForResponse()
{ 
  // if there are incoming bytes available 
  // from the server, read them and print them: 
  boolean repeat = true; 
  do{
    if (client.available()) 
    { 
      char c = client.read();
      Serial.print(c); 
    } 
    // if the servers disconnected, stop the client: 
    if (!client.connected()) 
    {
      Serial.println();
      Serial.println("disconnecting."); 
      client.stop(); 
      repeat = false; 
    } 
  }
  while (repeat);
}

String floatToString(float number, int precision)
{
  String stringNumber = "";
  //int prec;
  //only temperature (case 1) has a decimal place
  //if (sampleType == 1) prec = 1; else prec = 0;
  char tempChar[10];
  dtostrf(number, 3, precision, tempChar);
  stringNumber += tempChar;
  return stringNumber;
}

int calcUvIndex(int analogVal){
 // get voltage from analog value
 float uvindex = map(analogVal, 0, 1023, 0, 5000);
 uvindex /= 1000;
 //illumination intensity => V_sig * 307
 uvindex = uvindex * 307;
 //UVI => illumination intesity / 200
 uvindex = uvindex / 200;
 
 return int(uvindex+0.5);
}